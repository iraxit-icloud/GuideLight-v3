//
//  PathNavigationView.swift (FIXED)
//  Main Navigation UI with Advanced Features
//

import SwiftUI
import ARKit
import SceneKit

// MARK: - Enhanced Path Navigation View
struct PathNavigationView: View {
    @StateObject private var viewModel = PathNavigationViewModel()
    @Environment(\.dismiss) private var dismiss
    @State private var showingDestinationPicker = false
    @State private var showingSettings = false
    @AppStorage("showDebugOverlay") private var showDebugOverlay = false
    
    var body: some View {
        ZStack {
            // AR Camera View (Full Screen)
            ARNavigationViewContainer(viewModel: viewModel)
                .ignoresSafeArea()
            
            // Overlay UI
            VStack {
                // Top Bar
                topBar
                
                Spacer()
                
                // Status Messages
                if viewModel.navigationState == .pathCalculated {
                    pathCalculatedBanner
                        .transition(.move(edge: .top).combined(with: .opacity))
                }
                
                if viewModel.showDestinationReached {
                    destinationReachedBanner
                        .transition(.scale.combined(with: .opacity))
                }
                
                Spacer()
                
                // Navigation Stats (when navigating)
                if viewModel.navigationState == .navigating {
                    navigationStatsCard
                        .transition(.move(edge: .bottom).combined(with: .opacity))
                }
                
                // Bottom Controls
                bottomControls
            }
            .padding()
            
            // Debug Overlay
            if showDebugOverlay {
                DebugOverlay(viewModel: viewModel)
            }
            
            // Loading Overlay
            if viewModel.navigationState == .loadingMap ||
               viewModel.navigationState == .calculatingPath {
                loadingOverlay
            }
        }
        .navigationBarHidden(true)
        .sheet(isPresented: $showingDestinationPicker) {
            destinationPickerSheet
        }
        .sheet(isPresented: $showingSettings) {
            navigationSettingsSheet
        }
        .onAppear {
            viewModel.startARSession()
            viewModel.loadSelectedMap()
        }
        .onDisappear {
            viewModel.pauseARSession()
        }
        .alert("Error", isPresented: .constant(isError)) {
            Button("OK") {
                if case .error = viewModel.navigationState {
                    dismiss()
                }
            }
        } message: {
            Text(errorMessage)
        }
    }
    
    // MARK: - Top Bar
    private var topBar: some View {
        HStack {
            // Back Button
            Button {
                dismiss()
            } label: {
                Image(systemName: "xmark.circle.fill")
                    .font(.title)
                    .foregroundColor(.white)
                    .padding(8)
                    .background(.black.opacity(0.3))
                    .clipShape(Circle())
            }
            
            Spacer()
            
            // Destination Picker Button
            if viewModel.navigationState == .mapLoaded ||
               viewModel.navigationState == .selectingDestination ||
               viewModel.navigationState == .navigating {
                Button {
                    showingDestinationPicker = true
                } label: {
                    HStack {
                        Image(systemName: "mappin.circle.fill")
                        Text(viewModel.selectedDestination?.name ?? "Select Destination")
                            .lineLimit(1)
                        Image(systemName: "chevron.down")
                    }
                    .font(.subheadline.weight(.semibold))
                    .foregroundColor(.white)
                    .padding(.horizontal, 16)
                    .padding(.vertical, 10)
                    .background(.black.opacity(0.5))
                    .clipShape(RoundedRectangle(cornerRadius: 20))
                }
            }
            
            Spacer()
            
            // Settings Button
            Button {
                showingSettings = true
            } label: {
                Image(systemName: "gearshape.fill")
                    .font(.title2)
                    .foregroundColor(.white)
                    .padding(8)
                    .background(.black.opacity(0.3))
                    .clipShape(Circle())
            }
            
            // Reset Button
            if viewModel.navigationState == .navigating ||
               viewModel.navigationState == .pathCalculated {
                Button {
                    viewModel.resetNavigation()
                } label: {
                    Image(systemName: "arrow.counterclockwise.circle.fill")
                        .font(.title)
                        .foregroundColor(.white)
                        .padding(8)
                        .background(.black.opacity(0.3))
                        .clipShape(Circle())
                }
            }
        }
    }
    
    // MARK: - Path Calculated Banner
    private var pathCalculatedBanner: some View {
        VStack(spacing: 8) {
            Image(systemName: "checkmark.circle.fill")
                .font(.system(size: 40))
                .foregroundColor(.green)
            
            Text("Path Determined")
                .font(.title2.weight(.bold))
                .foregroundColor(.white)
            
            if let path = viewModel.currentPath {
                Text("\(path.path.count) waypoints â€¢ \(String(format: "%.1fm", path.totalDistance))")
                    .font(.subheadline)
                    .foregroundColor(.white.opacity(0.9))
            }
        }
        .padding(20)
        .background(.green.opacity(0.8))
        .clipShape(RoundedRectangle(cornerRadius: 16))
        .shadow(radius: 10)
    }
    
    // MARK: - Destination Reached Banner
    private var destinationReachedBanner: some View {
        VStack(spacing: 12) {
            Image(systemName: "flag.checkered.circle.fill")
                .font(.system(size: 60))
                .foregroundColor(.white)
            
            Text("Destination Reached!")
                .font(.title.weight(.bold))
                .foregroundColor(.white)
            
            if let destination = viewModel.selectedDestination {
                Text(destination.name)
                    .font(.title3)
                    .foregroundColor(.white.opacity(0.9))
            }
            
            if let stats = viewModel.statistics {
                VStack(spacing: 4) {
                    Text("Time: \(stats.formattedElapsedTime())")
                        .font(.caption)
                        .foregroundColor(.white.opacity(0.9))
                    
                    Text("Distance: \(String(format: "%.1fm", stats.totalDistance))")
                        .font(.caption)
                        .foregroundColor(.white.opacity(0.9))
                }
            }
        }
        .padding(30)
        .background(
            LinearGradient(
                colors: [.green, .blue],
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
        )
        .clipShape(RoundedRectangle(cornerRadius: 20))
        .shadow(radius: 15)
    }
    
    // MARK: - Navigation Stats Card
    private var navigationStatsCard: some View {
        VStack(spacing: 8) {
            if let nextPoint = viewModel.getNextTarget() {
                HStack {
                    VStack(alignment: .leading, spacing: 4) {
                        Text("Next Waypoint")
                            .font(.caption)
                            .foregroundColor(.white.opacity(0.7))
                        
                        Text(nextPoint.name)
                            .font(.headline)
                            .foregroundColor(.white)
                    }
                    
                    Spacer()
                    
                    VStack(alignment: .trailing, spacing: 4) {
                        HStack(spacing: 4) {
                            Image(systemName: viewModel.currentDirection.icon)
                                .font(.caption)
                            Text(viewModel.currentDirection.rawValue)
                                .font(.caption)
                        }
                        .foregroundColor(.white.opacity(0.7))
                        
                        Text(String(format: "%.1fm", viewModel.distanceToNextPoint))
                            .font(.title3.bold().monospacedDigit())
                            .foregroundColor(.white)
                    }
                }
                
                if let stats = viewModel.statistics {
                    Divider()
                        .background(.white.opacity(0.3))
                    
                    HStack {
                        StatItem(label: "Progress", value: "\(Int(stats.progressPercentage))%")
                        Spacer()
                        StatItem(label: "ETA", value: stats.formattedETA())
                        Spacer()
                        StatItem(label: "Speed", value: String(format: "%.1f m/s", stats.currentSpeed))
                    }
                }
            }
        }
        .padding()
        .background(.black.opacity(0.6))
        .clipShape(RoundedRectangle(cornerRadius: 16))
    }
    
    // MARK: - Bottom Controls
    private var bottomControls: some View {
        VStack(spacing: 12) {
            // Turn instruction (when navigating)
            if viewModel.navigationState == .navigating && viewModel.turnInstruction != .straight {
                HStack {
                    Image(systemName: viewModel.turnInstruction.icon)
                        .font(.title2)
                        .foregroundColor(.yellow)
                    
                    Text(viewModel.turnInstruction.description)
                        .font(.headline)
                        .foregroundColor(.white)
                }
                .padding()
                .background(.black.opacity(0.7))
                .clipShape(RoundedRectangle(cornerRadius: 12))
            }
            
            // Calculate Path Button
            if viewModel.navigationState == .selectingDestination {
                Button {
                    viewModel.calculatePath()
                } label: {
                    HStack {
                        Image(systemName: "point.topleft.down.curvedto.point.bottomright.up.fill")
                        Text("Calculate Path")
                            .font(.headline)
                    }
                    .foregroundColor(.white)
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(.blue)
                    .clipShape(RoundedRectangle(cornerRadius: 12))
                }
            }
        }
    }
    
    // MARK: - Loading Overlay
    private var loadingOverlay: some View {
        ZStack {
            Color.black.opacity(0.7)
                .ignoresSafeArea()
            
            VStack(spacing: 16) {
                ProgressView()
                    .progressViewStyle(CircularProgressViewStyle(tint: .white))
                    .scaleEffect(1.5)
                
                Text(loadingMessage)
                    .font(.headline)
                    .foregroundColor(.white)
            }
            .padding(40)
            .background(.black.opacity(0.8))
            .clipShape(RoundedRectangle(cornerRadius: 20))
        }
    }
    
    private var loadingMessage: String {
        switch viewModel.navigationState {
        case .loadingMap:
            return "Loading Map..."
        case .calculatingPath:
            return "Calculating Path..."
        default:
            return "Loading..."
        }
    }
    
    // MARK: - Destination Picker Sheet
    private var destinationPickerSheet: some View {
        NavigationView {
            List {
                if viewModel.availableDestinations.isEmpty {
                    VStack(spacing: 12) {
                        Image(systemName: "map")
                            .font(.largeTitle)
                            .foregroundColor(.gray)
                        Text("No destinations available")
                            .foregroundColor(.secondary)
                    }
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 40)
                } else {
                    ForEach(viewModel.availableDestinations) { destination in
                        Button {
                            viewModel.selectDestination(destination)
                            showingDestinationPicker = false
                        } label: {
                            HStack {
                                VStack(alignment: .leading, spacing: 4) {
                                    Text(destination.name)
                                        .font(.headline)
                                        .foregroundColor(.primary)
                                    
                                    if case .beacon(let category) = destination.nodeType {
                                        Text(category.capitalized)
                                            .font(.caption)
                                            .foregroundColor(.secondary)
                                    }
                                    
                                    if let currentPos = viewModel.getCurrentCameraPosition() {
                                        let distance = currentPos.distance(to: destination.position)
                                        Text(String(format: "%.1fm away", distance))
                                            .font(.caption2)
                                            .foregroundColor(.blue)
                                    }
                                }
                                
                                Spacer()
                                
                                if viewModel.selectedDestination?.id == destination.id {
                                    Image(systemName: "checkmark.circle.fill")
                                        .foregroundColor(.green)
                                }
                            }
                            .padding(.vertical, 4)
                        }
                    }
                }
            }
            .navigationTitle("Select Destination")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") {
                        showingDestinationPicker = false
                    }
                }
            }
        }
    }
    
    // MARK: - Navigation Settings Sheet
    private var navigationSettingsSheet: some View {
        NavigationView {
            Form {
                Section("Audio") {
                    Toggle("Audio Guidance", isOn: $viewModel.enableAudioGuidance)
                }
                
                Section("Haptics") {
                    Toggle("Haptic Feedback", isOn: $viewModel.enableHapticFeedback)
                }
                
                Section("Debug") {
                    Toggle("Show Debug Overlay", isOn: $showDebugOverlay)
                }
                
                Section("Performance") {
                    HStack {
                        Text("FPS")
                        Spacer()
                        Text(String(format: "%.0f", viewModel.currentFPS))
                            .foregroundColor(viewModel.isPerformanceGood ? .green : .orange)
                    }
                }
            }
            .navigationTitle("Navigation Settings")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") {
                        showingSettings = false
                    }
                }
            }
        }
    }
    
    // MARK: - Helper Properties
    private var isError: Bool {
        if case .error = viewModel.navigationState {
            return true
        }
        return false
    }
    
    private var errorMessage: String {
        if case .error(let message) = viewModel.navigationState {
            return message
        }
        return ""
    }
}

// MARK: - Stat Item
struct StatItem: View {
    let label: String
    let value: String
    
    var body: some View {
        VStack(spacing: 2) {
            Text(value)
                .font(.caption.bold().monospacedDigit())
                .foregroundColor(.white)
            
            Text(label)
                .font(.caption2)
                .foregroundColor(.white.opacity(0.7))
        }
    }
}

// MARK: - AR Navigation View Container
struct ARNavigationViewContainer: UIViewRepresentable {
    let viewModel: PathNavigationViewModel
    
    func makeUIView(context: Context) -> ARSCNView {
        let arView = ARSCNView()
        arView.delegate = context.coordinator
        arView.session = viewModel.session
        arView.scene = SCNScene()
        arView.automaticallyUpdatesLighting = true
        
        // Create visualizer
        context.coordinator.visualizer = ARPathVisualizer(sceneView: arView)
        
        return arView
    }
    
    func updateUIView(_ uiView: ARSCNView, context: Context) {
        context.coordinator.updateVisualization(viewModel: viewModel)
    }
    
    func makeCoordinator() -> Coordinator {
        Coordinator()
    }
    
    class Coordinator: NSObject, ARSCNViewDelegate {
        var visualizer: ARPathVisualizer?
        
        func updateVisualization(viewModel: PathNavigationViewModel) {
            guard let visualizer = visualizer else { return }
            
            // FIXED: Wrap in Task { @MainActor in ... }
            Task { @MainActor in
                switch viewModel.navigationState {
                case .navigating:
                    // Update arrow to next target
                    if let nextTarget = viewModel.getNextTarget(),
                       let direction = viewModel.getDirectionToNextTarget(),
                       let currentPosition = viewModel.getCurrentCameraPosition() {
                        visualizer.updateArrow(
                            at: currentPosition,
                            pointingTo: direction,
                            distance: viewModel.distanceToNextPoint
                        )
                    }
                    
                    // Show destination marker
                    if let finalDestination = viewModel.getFinalDestination() {
                        visualizer.updateDestinationMarker(at: finalDestination.position)
                    }
                    
                case .pathCalculated:
                    // Show destination marker only
                    if let finalDestination = viewModel.getFinalDestination() {
                        visualizer.updateDestinationMarker(at: finalDestination.position)
                    }
                    visualizer.clearArrow()
                    
                case .destinationReached:
                    // Clear all visualizations
                    visualizer.clearAll()
                    
                default:
                    // Clear visualizations for other states
                    visualizer.clearAll()
                }
            }
        }
        
        func renderer(_ renderer: SCNSceneRenderer, updateAtTime time: TimeInterval) {
            // Called every frame - can be used for smooth animations
        }
    }
}

#Preview {
    PathNavigationView()
}
